#!/bin/bash

[ -e /etc/cluster-tools-lihas.conf ] && . /etc/cluster-tools-lihas.conf
CRMONLY=0
KVMNAME=""
SIZE=""
DRBD=""

print_help() {
	echo "Usage: $0 --name=KVMNAME --size=SIZE --drbd=DRBDNUM [--print-crm-only]" >&2
	echo "--name: Name of KVM" >&2
	echo "--size:    virtual disk size, e.g. 10G" >&2
	echo "--drbd:    drbd device number to use" >&2
	echo "--print-crm-only:    just print the resulting crm resources" >&2
}
error() {
  print_help
  echo "$*"
  exit 1
}
TEMP=`getopt -o h --long help,name:,size:,drbd:,print-crm-only -- "$@"`
if [ $? != 0 ] ; then print_help >&2 ; exit 1 ; fi
eval set -- "$TEMP"
while true ; do
	case "$1" in
		--name) KVMNAME=$2; shift 2;;
		--size) SIZE=$2; shift 2;;
		--drbd) DRBD=$2; shift 2;;
		--print-crm-only) CRMONLY=1; shift 1;;
		--help|-h) print_help;;
		--) shift ; break ;;
		*) echo "Unknown parameter $1i, try -h" ; exit 1 ;;
	esac
done

if [ "x$KVMNAME" == "x" ]; then
	echo "Missing --kvmname" >&2
	print_help
	exit 1
fi
if [ "x$SIZE" == "x" ]; then
	echo "Missing --size" >&2
	print_help
	exit 1
fi

#if [ ga$2 == ga ]; then
#  echo "usage: $0 KVMNAME SIZE [DRBDNUM]" >&2
#  echo "  z.B. $0 test01 30G" >&2
#  echo "  z.B. $0 test01 30G 3" >&2
#  exit 1
#fi

VIRSHINSTANCES="qemu:///system qemu+ssh://$HOST2/system"
. $LIHASSOURCEDIR/usr/lib/cluster-tools-lihas/drbd-functions.sh
DRBDVERSION=$(drbdversion)
# different MACs per cluster
MACBASE=$(hostname | md5sum | awk '{printf("52:54:%02s:%02s:%02s\n", substr($1,1,2), substr($1,3,2), substr($1,5,2)) }')

# IF Abfragen nach dem installierten Software, die benoetigt wird
if [ ! -x /usr/bin/which ]; then echo "which ist nicht installiert!!!"; exit 1; fi
if ! which parted >/dev/null; then echo "Please Install parted"; exit 1; fi
if ! which crm >/dev/null ; then echo "Please Install crm"; exit 1; fi
if ! which drbdadm >/dev/null ; then echo "Please Install drbd"; exit 1; fi
if ! which awk >/dev/null ; then echo "Please Install awk"; exit 1; fi
if ! which sort >/dev/null ; then echo "Please Install sort"; exit 1; fi
if ! which tail >/dev/null ; then echo "Please Install tail"; exit 1; fi
if ! which printf >/dev/null ; then echo "Please Install printf"; exit 1; fi
if ! which ssh >/dev/null ; then echo "Please Install openssh"; exit 1; fi
if ! which lvcreate >/dev/null ; then echo "Please Install lvm2"; exit 1; fi
if ! which rsync >/dev/null ; then echo "Please Install rsync"; exit 1; fi
if ! which mktemp >/dev/null ; then echo "Please Install mktemp"; exit 1; fi
if ! which virsh >/dev/null ; then echo "Please Install libvirt-bin"; exit 1; fi
if ! which xmlstarlet >/dev/null ; then echo "Please Install xmlstarlet"; exit 1; fi

if [ "ga$DRBD" == "ga" ]; then
  DRBD=$(drbdnextfree)
fi

DRBDPORT=$(printf "%02i" $DRBD)

# VirtualDomain from resource-agents 3.9.3+git20121009-3.1 deletes the config from libvirtd
VIRTUALDOMAINKILL=0
if OCF_ROOT=/usr/lib/ocf /usr/lib/ocf/resource.d/heartbeat/VirtualDomain meta-data 2>/dev/null | xmlstarlet sel -t -v //parameter/@name 2>/dev/null | grep -q autoset_utilization_cpu; then
	VIRTUALDOMAINKILL=1
	mkdir -p /var/lib/libvirt/conf
fi
if [ -x /etc/init.d/libvirt-bin ]; then
	LIBVIRTSERVICE=/etc/init.d/libvirt-bin
elif [ -x /etc/init.d/libvirtd ]; then
	LIBVIRTSERVICE=/etc/init.d/libvirtd
else
	echo "Neither /etc/init.d/libvirt-bin, nor /etc/init.d/libvirtd is executable" >&2
	exit 1
fi

DUMMY=10

if [ $CRMONLY -eq 0 ]; then
	lvcreate -L$SIZE -n kvm_$KVMNAME $VG1
	ssh $HOST2 lvcreate -L$SIZE -n kvm_$KVMNAME $VG2

	cat <<-EOF > /etc/drbd.d/kvm_$KVMNAME.res
resource kvm_$KVMNAME {  
        protocol        C;
        syncer {
                rate    2000M;
        }
	startup {
		become-primary-on both;
	}
	net {
		allow-two-primaries;
		after-sb-0pri discard-zero-changes;
		after-sb-1pri discard-secondary;
		after-sb-2pri disconnect;
	}
        on $HOST1 {
                device          /dev/drbd$DRBD;
                disk            /dev/$VG1/kvm_$KVMNAME;
                flexible-meta-disk      internal;
                address         $IP_DRBD1:77$DRBDPORT;
        }
        on $HOST2 {
                device          /dev/drbd$DRBD;
                disk            /dev/$VG2/kvm_$KVMNAME;
                flexible-meta-disk      internal;
                address         $IP_DRBD2:77$DRBDPORT;
        }
}
EOF

	rsync -rlHpogDtSvx /etc/drbd.d $HOST2:/etc/
	yes yes | drbdadm create-md kvm_$KVMNAME
	drbdadm up kvm_$KVMNAME
	ssh $HOST2 "(yes yes | drbdadm create-md kvm_$KVMNAME && drbdadm up kvm_$KVMNAME)"

	drbdprimaryforce $DRBDVERSION kvm_$KVMNAME
	parted /dev/drbd$DRBD mklabel msdos
fi
cat <<EOF | if [ $CRMONLY -eq 0 ]; then crm configure; else cat; fi
primitive p_$KVMNAME ocf:linbit:drbd \
        params drbd_resource="kvm_$KVMNAME" \
        op start interval="0" timeout="240" \
        op promote interval="0" timeout="90" \
        op demote interval="0" timeout="90" \
        op stop interval="0" timeout="100" \
        op monitor interval="10" timeout="20" start-delay="0" \
        op notify interval="0" timeout="90"
ms ms_$KVMNAME p_$KVMNAME \
        meta master-max="2" clone-max="2" notify="true" interleave="true"
commit
EOF

if [ $CRMONLY -eq 0 ]; then
#	while ! drbd-overview | sed 's/:/ /g' | awk '$2 ~ /^kvm_'$KVMNAME'(\/.*|$)$/' | grep -q Primary/Primary; do
#	  cat /proc/drbd
#	  sleep 5
#	done

	virsh pool-create-as --name $KVMNAME --type disk --source-path dev --source-dev /dev/drbd$DRBD --target /dev/
	# VirtualDomain in resource-scripts
	virsh pool-dumpxml $KVMNAME > /etc/libvirt/storage/$KVMNAME.xml
	ln -s /etc/libvirt/storage/$KVMNAME.xml /etc/libvirt/storage/autostart/$KVMNAME.xml
	ssh $HOST2 $LIBVIRTSERVICE stop
	rsync -rlHpogDtSvx --numeric-ids /etc/libvirt $HOST2:/etc/
	ssh $HOST2 $LIBVIRTSERVICE start
	$LIBVIRTSERVICE restart

	DOMFILE=`mktemp`
cat <<-EOF >$DOMFILE
<domain type='kvm' id='3'>
  <name>$KVMNAME</name>
  <uuid>e48d949d-ea81-4ad8-a2b4-56127cd392$DRBDPORT</uuid>
  <memory>524288</memory>
  <currentMemory>524288</currentMemory>
  <vcpu>1</vcpu>
  <os>
    <type arch='x86_64' machine='pc-0.12'>hvm</type>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset='localtime'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/bin/kvm</emulator>
    <disk type='block' device='disk' cache='none'>
      <driver name='qemu' type='raw'/>
      <source dev='/dev/drbd$DRBD'/>
      <target dev='hda' bus='virtio'/>
      <alias name='virtio-disk0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
    </disk>
    <interface type='bridge'>
      <mac address='$MACBASE:$DRBDPORT'/>
      <source bridge='br0'/>
      <target dev='vnet1'/>
      <model type='virtio'/>
      <alias name='net0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    <input type='mouse' bus='ps2'/>
    <input type='tablet' bus='usb'/>
    <graphics type='vnc' port='59$DRBDPORT' autoport='no' listen='127.0.0.1' keymap='de' sharePolicy='ignore'/>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
      <alias name='video0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>
    <memballoon model='virtio'>
      <alias name='balloon0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </memballoon>
  </devices>
</domain>
EOF

	for virshinstance in $VIRSHINSTANCES; do
		echo virsh@$virshinstance:
	  virsh -c $virshinstance define $DOMFILE
	done
	if [ x1 == "x$VIRTUALDOMAINKILL" ]; then
		cp $DOMFILE /var/lib/libvirt/qemu/conf/$KVMNAME.xml
	fi
	rm $DOMFILE
fi
cat <<EOF | if [ $CRMONLY -eq 0 ]; then crm configure; else cat; fi
primitive res_VirtualDomain_kvm_$KVMNAME ocf:heartbeat:VirtualDomain \
        params config="/etc/libvirt/qemu/$KVMNAME.xml" \
        op start interval="0" timeout="90" \
        op stop interval="0" timeout="90" \
        op monitor interval="10" timeout="30" start-delay="0" \
        op migrate_from interval="0" timeout="60" \
        op migrate_to interval="0" timeout="120" \
        meta target-role="stopped" \
        meta allow-migrate="true"
colocation col_res_VirtualDomain_kvm_$KVMNAME-ms_$KVMNAME inf: res_VirtualDomain_kvm_$KVMNAME ms_$KVMNAME:Master
order ord_ms_$KVMNAME-res_VirtualDomain_kvm_$KVMNAME inf: ms_$KVMNAME:promote res_VirtualDomain_kvm_$KVMNAME:start
commit
EOF

echo "Dinge tun, z.B. Bootmedium auswaehlen"
# vim: ts=2 sw=2 sts=2 sr noet
